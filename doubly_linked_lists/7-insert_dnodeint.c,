#include "lists.h"
#include <stdlib.h> /* For malloc */

/**
 * insert_dnodeint_at_index - Inserts a new node at a given position
 * @h: Double pointer to the head of the doubly linked list
 * @idx: The index where the new node should be added (starting at 0)
 * @n: The data (n) to store in the new node
 *
 * Return: The address of the new node, or NULL if it failed
 */
dlistint_t *insert_dnodeint_at_index(dlistint_t **h, unsigned int idx, int n)
{
	dlistint_t *new_node, *temp = *h;
	unsigned int current_index = 0;

	/* Check if the list is empty and the index is 0 */
	if (idx == 0)
		return (add_dnodeint(h, n)); /* Use the function for adding at the beginning */

	/* Traverse the list to find the node just before the desired index */
	while (temp != NULL && current_index < idx - 1)
	{
		temp = temp->next;
		current_index++;
	}

	/* If the index is out of range (after the last node) */
	if (temp == NULL || (temp->next == NULL && idx > current_index + 1))
		return (NULL);

	/* Allocate memory for the new node */
	new_node = malloc(sizeof(dlistint_t));
	if (new_node == NULL)
		return (NULL);

	/* Initialize the new node */
	new_node->n = n;
	new_node->next = temp->next;
	new_node->prev = temp;

	/* If we are inserting at the end of the list */
	if (temp->next != NULL)
		temp->next->prev = new_node;

	/* Update the current node's next pointer */
	temp->next = new_node;

	return (new_node);
}
